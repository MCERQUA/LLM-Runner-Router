# Secret template for LLM Runner Router
# NOTE: Replace base64 encoded values with actual secrets before applying
apiVersion: v1
kind: Secret
metadata:
  name: llm-runner-secrets
  namespace: llm-systems
  labels:
    app: llm-runner-router
    component: secrets
  annotations:
    reloader.stakater.com/match: "true"
type: Opaque
data:
  # HuggingFace API Token (base64 encoded)
  # To encode: echo -n "your-huggingface-token" | base64
  huggingface-token: "REPLACE_WITH_BASE64_ENCODED_HUGGINGFACE_TOKEN"
  
  # API Key for authentication (base64 encoded)
  # To encode: echo -n "your-api-key" | base64
  api-key: "REPLACE_WITH_BASE64_ENCODED_API_KEY"
  
  # JWT Secret for token signing (base64 encoded)
  # To generate and encode: openssl rand -base64 32
  jwt-secret: "REPLACE_WITH_BASE64_ENCODED_JWT_SECRET"
  
  # Database credentials (if needed)
  # To encode: echo -n "your-db-password" | base64
  db-password: "REPLACE_WITH_BASE64_ENCODED_DB_PASSWORD"
  
  # Redis password (if using Redis for caching)
  # To encode: echo -n "your-redis-password" | base64
  redis-password: "REPLACE_WITH_BASE64_ENCODED_REDIS_PASSWORD"
  
  # OpenAI API Key (if using as fallback)
  # To encode: echo -n "your-openai-key" | base64
  openai-api-key: "REPLACE_WITH_BASE64_ENCODED_OPENAI_KEY"
  
  # Anthropic API Key (if using as fallback)
  # To encode: echo -n "your-anthropic-key" | base64
  anthropic-api-key: "REPLACE_WITH_BASE64_ENCODED_ANTHROPIC_KEY"
  
  # SSL/TLS Certificates (if not using cert-manager)
  tls-cert: "REPLACE_WITH_BASE64_ENCODED_TLS_CERT"
  tls-key: "REPLACE_WITH_BASE64_ENCODED_TLS_KEY"

---
# Example of how to create secrets using kubectl (for reference)
# Save these commands in a separate file (create-secrets.sh) and run manually
#
# Create namespace first:
# kubectl create namespace llm-systems
#
# Create secrets directly (more secure than applying YAML with secrets):
# kubectl create secret generic llm-runner-secrets \
#   --from-literal=huggingface-token=your-actual-token \
#   --from-literal=api-key=your-actual-api-key \
#   --from-literal=jwt-secret=$(openssl rand -base64 32) \
#   --from-literal=db-password=your-db-password \
#   --from-literal=redis-password=your-redis-password \
#   --from-literal=openai-api-key=your-openai-key \
#   --from-literal=anthropic-api-key=your-anthropic-key \
#   --namespace=llm-systems
#
# Or create from files:
# kubectl create secret tls llm-runner-router-tls \
#   --cert=path/to/tls.crt \
#   --key=path/to/tls.key \
#   --namespace=llm-systems
#
# Add labels to the secret:
# kubectl label secret llm-runner-secrets \
#   app=llm-runner-router \
#   component=secrets \
#   --namespace=llm-systems

apiVersion: v1
kind: Secret
metadata:
  name: llm-runner-router-tls
  namespace: llm-systems
  labels:
    app: llm-runner-router
    component: tls
type: kubernetes.io/tls
data:
  # TLS certificate (base64 encoded)
  tls.crt: "REPLACE_WITH_BASE64_ENCODED_TLS_CERT"
  # TLS private key (base64 encoded)
  tls.key: "REPLACE_WITH_BASE64_ENCODED_TLS_KEY"

---
apiVersion: v1
kind: Secret
metadata:
  name: llm-runner-router-ws-tls
  namespace: llm-systems
  labels:
    app: llm-runner-router
    component: tls-websocket
type: kubernetes.io/tls
data:
  # WebSocket TLS certificate (base64 encoded)
  tls.crt: "REPLACE_WITH_BASE64_ENCODED_WS_TLS_CERT"
  # WebSocket TLS private key (base64 encoded)
  tls.key: "REPLACE_WITH_BASE64_ENCODED_WS_TLS_KEY"