# Default values for llm-runner-router.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
app:
  name: llm-runner-router
  version: "1.2.1"

# Image configuration
image:
  repository: llm-runner-router
  tag: "1.2.1"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Deployment configuration
deployment:
  replicaCount: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  # Pod configuration
  pod:
    annotations: {}
    labels: {}
    securityContext:
      runAsNonRoot: true
      runAsUser: 1001
      runAsGroup: 1001
      fsGroup: 1001
    
    # Container configuration
    container:
      name: llm-runner-router
      ports:
        - name: http
          containerPort: 3006
          protocol: TCP
        - name: websocket
          containerPort: 8080
          protocol: TCP
      
      # Security context
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
        readOnlyRootFilesystem: false
      
      # Resource limits
      resources:
        requests:
          memory: "2Gi"
          cpu: "500m"
        limits:
          memory: "8Gi"
          cpu: "2000m"
      
      # Health checks
      livenessProbe:
        httpGet:
          path: /api/health
          port: http
        initialDelaySeconds: 30
        periodSeconds: 30
        timeoutSeconds: 5
        failureThreshold: 3
        successThreshold: 1
      
      readinessProbe:
        httpGet:
          path: /api/ready
          port: http
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        failureThreshold: 3
        successThreshold: 1
      
      startupProbe:
        httpGet:
          path: /api/health
          port: http
        initialDelaySeconds: 10
        periodSeconds: 5
        timeoutSeconds: 5
        failureThreshold: 12
        successThreshold: 1

# Service configuration
service:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 3006
      protocol: TCP
    - name: https
      port: 443
      targetPort: 3006
      protocol: TCP
    - name: websocket
      port: 8080
      targetPort: 8080
      protocol: TCP
  
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
  
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600
  
  loadBalancerSourceRanges: []

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  
  hosts:
    - host: llm-api.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
    - host: llm-router.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  
  tls:
    - secretName: llm-runner-router-tls
      hosts:
        - llm-api.yourdomain.com
        - llm-router.yourdomain.com

# WebSocket-specific ingress
websocketIngress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/websocket-services: "llm-runner-router"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  
  hosts:
    - host: ws.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  
  tls:
    - secretName: llm-runner-router-ws-tls
      hosts:
        - ws.yourdomain.com

# Configuration
config:
  # Application settings
  nodeEnv: production
  port: 3006
  wsPort: 8080
  
  # LLM Router settings
  routingStrategy: balanced
  maxMemory: 4096
  cacheEnabled: true
  logLevel: info
  
  # Performance settings
  maxConcurrentRequests: 100
  requestTimeout: 30000
  modelLoadTimeout: 300000
  cacheTtl: 3600
  
  # Security settings
  enableCors: true
  rateLimitRequests: 100
  rateLimitWindow: 60
  
  # WebSocket settings
  wsHeartbeatInterval: 30000
  wsMaxConnections: 1000
  wsCompression: true

# Secrets (use external secret management in production)
secrets:
  # Set to false to disable secret creation
  create: true
  
  # Secret data (base64 encoded)
  data:
    huggingfaceToken: ""
    apiKey: ""
    jwtSecret: ""
    dbPassword: ""
    redisPassword: ""
    openaiApiKey: ""
    anthropicApiKey: ""

# Persistent storage
persistence:
  enabled: true
  
  modelCache:
    size: 50Gi
    storageClass: "fast-ssd"
    accessMode: ReadWriteMany
  
  logs:
    size: 10Gi
    storageClass: "standard-ssd"
    accessMode: ReadWriteMany
  
  sharedCache:
    size: 20Gi
    storageClass: "fast-ssd"
    accessMode: ReadWriteMany

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  
  # KEDA (optional)
  keda:
    enabled: false
    minReplicas: 2
    maxReplicas: 20
    pollingInterval: 30
    cooldownPeriod: 300

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: true

# RBAC
rbac:
  create: true
  rules: []

# Security Context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false

# Node selection
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - llm-runner-router
          topologyKey: kubernetes.io/hostname

# Network Policy
networkPolicy:
  enabled: true
  ingress:
    enabled: true
    from: []
  egress:
    enabled: true
    to: []

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: false
    namespace: ""
    labels: {}
    interval: 30s
    path: /metrics
    port: http

# Logging
logging:
  enabled: true
  level: info
  format: json

# Environment-specific overrides
environments:
  development:
    replicaCount: 1
    resources:
      requests:
        memory: "512Mi"
        cpu: "100m"
      limits:
        memory: "2Gi"
        cpu: "500m"
    persistence:
      modelCache:
        size: 10Gi
    config:
      nodeEnv: development
      logLevel: debug
      cacheEnabled: false
  
  staging:
    replicaCount: 2
    resources:
      requests:
        memory: "1Gi"
        cpu: "250m"
      limits:
        memory: "4Gi"
        cpu: "1000m"
    persistence:
      modelCache:
        size: 30Gi
    config:
      nodeEnv: staging
      logLevel: info
  
  production:
    replicaCount: 5
    resources:
      requests:
        memory: "4Gi"
        cpu: "1000m"
      limits:
        memory: "16Gi"
        cpu: "4000m"
    persistence:
      modelCache:
        size: 100Gi
    config:
      nodeEnv: production
      logLevel: warn
      routingStrategy: quality-first