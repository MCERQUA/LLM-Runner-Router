name: Continuous Deployment

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(node -p "require('./package.json').version")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
        
    - name: Validate version format
      run: |
        if [[ ! "${{ steps.get_version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Invalid version format: ${{ steps.get_version.outputs.version }}"
          exit 1
        fi
        echo "‚úÖ Valid version format: ${{ steps.get_version.outputs.version }}"
        
    - name: Check if version exists on NPM
      run: |
        if npm view llm-runner-router@${{ steps.get_version.outputs.version }} version 2>/dev/null; then
          echo "‚ùå Version ${{ steps.get_version.outputs.version }} already exists on NPM"
          exit 1
        fi
        echo "‚úÖ Version ${{ steps.get_version.outputs.version }} is available"

  test:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests with coverage
      run: npm run test:coverage
      env:
        NODE_OPTIONS: --experimental-vm-modules
        
    - name: Run build
      run: npm run build
      
    - name: Validate package integrity
      run: |
        npm pack --dry-run
        echo "‚úÖ Package integrity validated"

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate, test]
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-release \
          -p 3000:3000 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}
        sleep 15
        curl -f http://localhost:3000/api/health || exit 1
        docker stop test-release
        echo "‚úÖ Docker image validated"

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate, test]
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Verify NPM publish
      run: |
        sleep 30  # Wait for NPM propagation
        npm view llm-runner-router@${{ needs.validate.outputs.version }} version
        echo "‚úÖ Successfully published to NPM"

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, test, docker, publish-npm]
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Generate changelog
      id: changelog
      run: |
        if command -v git-cliff &> /dev/null; then
          git-cliff --latest --strip header > RELEASE_NOTES.md
        else
          echo "## Changes in v${{ needs.validate.outputs.version }}" > RELEASE_NOTES.md
          git log --oneline $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_NOTES.md
        fi
        
    - name: Create release package
      run: |
        mkdir -p release-assets
        npm pack
        mv *.tgz release-assets/
        cp README.md CHANGELOG.md LICENSE release-assets/ 2>/dev/null || true
        tar -czf release-assets/source-code.tar.gz --exclude-vcs .
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.validate.outputs.version }}
        name: Release v${{ needs.validate.outputs.version }}
        body_path: RELEASE_NOTES.md
        files: |
          release-assets/*
        generate_release_notes: true
        make_latest: true
        prerelease: ${{ contains(needs.validate.outputs.version, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate documentation
      run: npm run docs
      
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v3.0
      if: ${{ secrets.NETLIFY_AUTH_TOKEN != '' && secrets.NETLIFY_SITE_ID != '' }}
      with:
        publish-dir: './docs'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Documentation for v${{ needs.validate.outputs.version }}"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  notify-completion:
    name: Notify Release Completion
    runs-on: ubuntu-latest
    needs: [validate, test, docker, publish-npm, github-release, deploy-docs]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.github-release.result == 'success' && needs.publish-npm.result == 'success'
      run: |
        echo "üéâ Release v${{ needs.validate.outputs.version }} completed successfully!"
        echo "üì¶ NPM: https://www.npmjs.com/package/llm-runner-router"
        echo "üê≥ Docker: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}"
        echo "üìã GitHub: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.validate.outputs.version }}"
        
    - name: Notify failure
      if: needs.github-release.result == 'failure' || needs.publish-npm.result == 'failure'
      run: |
        echo "‚ùå Release v${{ needs.validate.outputs.version }} failed!"
        echo "GitHub Release: ${{ needs.github-release.result }}"
        echo "NPM Publish: ${{ needs.publish-npm.result }}"
        echo "Docker Build: ${{ needs.docker.result }}"
        exit 1