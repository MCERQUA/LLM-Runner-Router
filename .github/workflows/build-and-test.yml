name: Build and Test All Bindings

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  RUST_VERSION: 'stable'

jobs:
  # Test matrix for different platforms
  test-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20']
        include:
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
          - os: macos-latest
            rust-target: x86_64-apple-darwin
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        target: ${{ matrix.rust-target }}
        override: true
        components: rustfmt, clippy
        
    - name: Setup wasm-pack
      uses: jetli/wasm-pack-action@v0.4.0
      with:
        version: 'latest'
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          bindings/rust/target
          bindings/wasm/target
          src/native/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build pytest pytest-asyncio pytest-cov
        
    - name: Run linting
      run: |
        npm run lint
        
    - name: Run main project tests
      run: npm test
      
    - name: Build and test Python bindings
      run: |
        cd bindings/python
        python -m pip install -r requirements.txt
        python -m build
        pip install -e .
        python -m pytest tests/ -v
        
    - name: Build and test Rust bindings
      run: |
        cd bindings/rust
        cargo build --release
        cargo test --release
        cargo clippy -- -D warnings
        
    - name: Build and test WASM bindings (Unix)
      if: runner.os != 'Windows'
      run: |
        cd bindings/wasm
        wasm-pack build --target web --release
        wasm-pack test --chrome --headless
        
    - name: Build and test WASM bindings (Windows)
      if: runner.os == 'Windows'
      run: |
        cd bindings/wasm
        wasm-pack build --target web --release
        # Skip headless tests on Windows due to Chrome setup complexity
        
    - name: Build and test native core
      run: |
        cd src/native
        cargo build --release
        cargo test --release
        npm install
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: bindings-${{ matrix.os }}-${{ matrix.node-version }}
        path: |
          bindings/python/dist/
          bindings/rust/target/release/
          bindings/wasm/pkg/
          src/native/target/release/

  # Specialized Python testing across versions
  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install and test Python bindings
      run: |
        cd bindings/python
        python -m pip install --upgrade pip build pytest pytest-asyncio pytest-cov
        python -m pip install -r requirements.txt
        python -m build
        pip install -e .
        python -m pytest tests/ -v --cov=llm_runner_router

  # Security and quality checks
  security-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level moderate
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run Rust security audit
      run: |
        cd bindings/rust && cargo audit
        cd ../wasm && cargo audit
        cd ../../src/native && cargo audit

  # Performance benchmarks
  benchmark:
    runs-on: ubuntu-latest
    needs: [test-matrix]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build optimized bindings
      run: ./scripts/build-all-bindings.sh --release
      
    - name: Run benchmarks
      run: npm run benchmark
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

  # Documentation generation
  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        npm ci
        pip install sphinx sphinx-rtd-theme
        
    - name: Generate documentation
      run: |
        npm run docs
        cd bindings/rust && cargo doc --no-deps
        cd ../python && pip install -r requirements.txt && pip install -e . && sphinx-build -b html docs docs/_build
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs

  # Package and release
  package:
    runs-on: ubuntu-latest
    needs: [test-matrix, security-audit]
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup wasm-pack
      uses: jetli/wasm-pack-action@v0.4.0
      with:
        version: 'latest'
        
    - name: Install dependencies
      run: |
        npm ci
        pip install build twine
        
    - name: Build all packages
      run: ./scripts/build-all-bindings.sh --release
      
    - name: Package all bindings
      run: |
        # Package Python
        cd bindings/python && python -m build
        
        # Package Rust
        cd ../rust && cargo package --no-verify
        
        # Package WASM
        cd ../wasm && wasm-pack pack pkg
        
        # Package native
        cd ../../src/native && npm pack
        
    - name: Publish to npm (main package)
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Publish Python package to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        cd bindings/python
        python -m twine upload dist/*
        
    - name: Publish Rust crate to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}
      run: |
        cd bindings/rust
        cargo publish
        
    - name: Create release assets
      run: |
        mkdir release-assets
        cp bindings/python/dist/* release-assets/
        cp bindings/rust/target/package/*.crate release-assets/
        cp bindings/wasm/pkg/*.tgz release-assets/
        cp src/native/*.tgz release-assets/
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release-assets/
        asset_name: llm-runner-router-bindings
        asset_content_type: application/zip