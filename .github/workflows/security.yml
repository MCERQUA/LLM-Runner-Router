name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_ENV: test

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: |
        npm audit --audit-level high --json > audit-results.json || true
        npm audit --audit-level high
        
    - name: Parse audit results
      run: |
        if [ -f "audit-results.json" ]; then
          VULNERABILITIES=$(node -p "
            const audit = require('./audit-results.json');
            const metadata = audit.metadata || {};
            const vulnerabilities = metadata.vulnerabilities || {};
            JSON.stringify({
              total: vulnerabilities.total || 0,
              high: vulnerabilities.high || 0,
              critical: vulnerabilities.critical || 0,
              moderate: vulnerabilities.moderate || 0,
              low: vulnerabilities.low || 0
            }, null, 2)
          ")
          echo "Vulnerability Summary:"
          echo "$VULNERABILITIES"
          
          CRITICAL=$(echo "$VULNERABILITIES" | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin')).critical")
          HIGH=$(echo "$VULNERABILITIES" | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin')).high")
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "❌ Critical or high severity vulnerabilities found!"
            exit 1
          else
            echo "✅ No critical or high severity vulnerabilities found"
          fi
        fi
        
    - name: Upload audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-audit-results
        path: audit-results.json
        retention-days: 30

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run GitLeaks secret detection
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        
    - name: Check for sensitive patterns
      run: |
        echo "🔍 Scanning for sensitive patterns..."
        
        # Common secret patterns
        PATTERNS=(
          "password\s*=\s*['\"][^'\"]{8,}['\"]"
          "api[_-]?key\s*=\s*['\"][^'\"]{20,}['\"]"
          "secret\s*=\s*['\"][^'\"]{20,}['\"]"
          "token\s*=\s*['\"][^'\"]{20,}['\"]"
          "private[_-]?key"
          "BEGIN\s+(RSA\s+)?PRIVATE\s+KEY"
          "sk_live_[0-9a-zA-Z]{24,}"
          "pk_live_[0-9a-zA-Z]{24,}"
        )
        
        FOUND=false
        for pattern in "${PATTERNS[@]}"; do
          if grep -r -i -E "$pattern" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.log" --exclude="security.yml"; then
            echo "❌ Potential secret found matching pattern: $pattern"
            FOUND=true
          fi
        done
        
        if [ "$FOUND" = true ]; then
          echo "❌ Potential secrets detected in codebase!"
          exit 1
        else
          echo "✅ No obvious secrets detected"
        fi

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t llm-runner-router:security-scan .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'llm-runner-router:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload Trivy scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy in table format
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'llm-runner-router:security-scan'
        format: 'table'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install license checker
      run: npm install -g license-checker
      
    - name: Check licenses
      run: |
        license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;CC0-1.0;Unlicense' --excludePrivatePackages > license-report.txt 2>&1 || true
        
        echo "📋 License Report:"
        cat license-report.txt
        
        # Check for problematic licenses
        PROBLEMATIC_LICENSES=(
          "GPL"
          "AGPL"
          "LGPL"
          "CPAL"
          "EPL"
          "MPL"
          "SSPL"
        )
        
        FOUND_ISSUES=false
        for license in "${PROBLEMATIC_LICENSES[@]}"; do
          if grep -i "$license" license-report.txt; then
            echo "❌ Problematic license found: $license"
            FOUND_ISSUES=true
          fi
        done
        
        if [ "$FOUND_ISSUES" = true ]; then
          echo "❌ License compliance issues detected!"
          exit 1
        else
          echo "✅ All licenses are compliant"
        fi
        
    - name: Upload license report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: license-report.txt
        retention-days: 30

  security-headers:
    name: Security Headers Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start server in background
      run: |
        npm start &
        sleep 10
        
    - name: Test security headers
      run: |
        echo "🔒 Testing security headers..."
        
        HEADERS_TO_CHECK=(
          "X-Content-Type-Options: nosniff"
          "X-Frame-Options"
          "X-XSS-Protection"
          "Strict-Transport-Security"
          "Content-Security-Policy"
        )
        
        RESPONSE=$(curl -s -I http://localhost:3000/)
        echo "Server response headers:"
        echo "$RESPONSE"
        
        MISSING_HEADERS=()
        for header in "${HEADERS_TO_CHECK[@]}"; do
          HEADER_NAME=$(echo "$header" | cut -d: -f1)
          if ! echo "$RESPONSE" | grep -i "$HEADER_NAME"; then
            MISSING_HEADERS+=("$HEADER_NAME")
          fi
        done
        
        if [ ${#MISSING_HEADERS[@]} -gt 0 ]; then
          echo "⚠️  Missing security headers: ${MISSING_HEADERS[*]}"
          echo "Consider adding these headers for better security"
        else
          echo "✅ All recommended security headers are present"
        fi

  generate-security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, codeql-analysis, license-compliance]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate security report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Job Results" >> security-report.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
        echo "- Secret Detection: ${{ needs.secret-scan.result }}" >> security-report.md
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-report.md
        echo "- License Compliance: ${{ needs.license-compliance.result }}" >> security-report.md
        echo "" >> security-report.md
        
        if [ -f "license-report/license-report.txt" ]; then
          echo "## License Report" >> security-report.md
          echo "\`\`\`" >> security-report.md
          cat license-report/license-report.txt >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        
        if [ -f "dependency-audit-results/audit-results.json" ]; then
          echo "## Dependency Vulnerabilities" >> security-report.md
          echo "\`\`\`json" >> security-report.md
          cat dependency-audit-results/audit-results.json >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        retention-days: 90
        
    - name: Comment security report on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('security-report.md')) {
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${report}`
            });
          }

  notify-security-issues:
    name: Notify Security Issues
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, codeql-analysis, container-scan, license-compliance]
    if: failure() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    
    steps:
    - name: Create security issue
      uses: actions/github-script@v7
      with:
        script: |
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['security', 'vulnerability'],
            state: 'open'
          });
          
          if (issues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security vulnerabilities detected',
              body: `
              Security scan failed on ${new Date().toISOString()}
              
              **Job Results:**
              - Dependency Scan: ${{ needs.dependency-scan.result }}
              - Secret Detection: ${{ needs.secret-scan.result }}
              - CodeQL Analysis: ${{ needs.codeql-analysis.result }}
              - Container Scan: ${{ needs.container-scan.result }}
              - License Compliance: ${{ needs.license-compliance.result }}
              
              **Branch:** ${context.ref}
              **Commit:** ${context.sha}
              **Workflow:** ${context.workflow}
              
              Please review the security scan results and address any vulnerabilities.
              `,
              labels: ['security', 'vulnerability', 'high-priority']
            });
          }